#!/bin/bash
# Copyright 2019 Janet Davis CC-BY-NC-SA

# Get compiler test info
stage=$1
testno=$2
test=$3
maxscore=$4

descr="Stage $stage$testno: $test.jack"
echo "$descr"

case $test in
    'Seven/Main')   
        keywords=(function Main main push constant call Math multiply add Output printInt pop temp return)
        ;;
    'ConvertToBin/Main')
        keywords=(label goto if-goto gt eq and local argument "pop local" neg not WHILE\_EXP WHILE\_END)
        ;;
    'Square/Main')
        keywords=(SquareGame.run SquareGame.dispose "push local 0")
        ;;
    'Square/Square')
        keywords=("push pointer 0")
        ;;
    'Average/Main')
        keywords=("pop pointer 1" "pop that 0" "push that 0" String.new String.appendChar)
        ;;
    'Pong/Ball')
        keywords=("push pointer 0")
        ;;
    'Pong/Ball')
        keywords=("pop pointer 1")
        ;;
esac

# Locate directories and files
base=$(pwd)
if [ $GRADESCOPE_DEV ]; then
    source="$base"
    #python="/anaconda/bin/python3"
    python="python"
    grep="/usr/bin/grep"
    comm="/usr/bin/comm --nocheck-order"
else
    source="$base/source"
    python="/usr/bin/python3"
    grep="/usr/bin/grep"
    comm="/usr/bin/comm --nocheck-order"
fi

canonical_compiler="$source/nand2tetris/tools/JackCompiler.sh"

submission="$base/submission"
main="$submission/hjc.py"

pointsfile="$submssion/$test.points"

jackfile="$submission/$test.jack"
cmpfile="$submission/$test.cmp.vm"
vmfile="$submission/$test.vm"
stdoutfile="$submission/$test.stdout"
gradefile="$base/results/$stage-$testno.results.json"

#if [ ! -f "$submission/hjcTokenizer.py" ]; then
#    score=0
#    message="hjcTokenizer.py not submitted"
#elif [ ! -f "$submission/hjcCompile.py" ]; then
#    score=0
#    message="hjcCompile.py not submitted"
#else
if [ true ]; then # just here to keep structure
    # Create comparison file
    command="$canonical_compiler $jackfile; mv $vmfile $cmpfile"
    echo "Running '$command' ..."
    eval $command

    # Run main, redirecting stderr and stdout
    command="$python $main $jackfile &> $stdoutfile"
    echo "Running '$command' ..."
    eval $command 

    if [ ! -f $vmfile ]; then
        # Output file not generated
        score=0
        # Replace " with ' and line breaks with \n to make the JSON formatted correctly.
        IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(tr "\042" "\047" < $stdoutfile))'
        len=${#lines[@]}
        message=""
        for (( i=0; i<$len; i++ )); do 
            message="$message\n${lines[$i]}"
        done
    elif [ ! -s $vmfile ]; then
        score=0
        message="Output file is empty"
    else
        # Output file generated - compare to standard results
        # ignoring differences in whitespace and end-of-line comments
        result=`/usr/bin/diff -w -q -I '//.*' $cmpfile $vmfile`
        if [[ $result != *differ* ]]; then
            score=$maxscore
            message="Output is identical to the expected output"
        else
            score=0
            kwlist=''
            for idx in ${!keywords[@]} 
            do 
                kw="${keywords[$idx]}"
                command="$grep '$kw' $vmfile > .tmp"
                eval $command
                if [ -s .tmp ]; then
                    score=$((score + 2))
                    kwlist="$kwlist '$kw'"
                fi
            done
            if [[ $score == 0 ]]; then
                message="Output contains none of the expected keywords"
            else
                # strip all comments and blank lines first
                sed -i.orig '\~^[[:blank:]]*//~d; s~//.*~~' $vmfile
                numerator=`$comm -1 -2 $cmpfile $vmfile | wc -l` # common lines
                echo "$numerator lines in common"
                # not sure what this one does...
                #numerator=$((numerator - `$comm -1 -3 $cmpfile $vmfile | wc -l`))
                #echo "$numerator after subtracting unique lines"
                denominator=`cat $cmpfile | wc -l`
                frac=`echo "100*$numerator/$denominator" | bc`
                commonscore=`echo "$maxscore*$numerator/$denominator" | bc`
                message="Output file is $frac% identical to standard Jack compiler output."
                message="$message\n A comparison is below:\n"
                message="$message Std. Jack File                         YOUR FILE\n"
                message="$message --------------                         ---------\n"
                result=`/usr/bin/diff -w -y -I '//.*' $cmpfile $vmfile`
                # Replace " with ' and line breaks with \n to make the JSON formatted correctly.
                # "expand" replaces tabs with spaces.
                IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(echo "$result" | expand | tr "\042" "\047"))'
                len=${#lines[@]}
                for (( i=0; i<$len; i++ )); do
                    message="$message\n${lines[$i]}"
                done
                score=$commonscore
                #if [[ $commonscore > $score ]]; then
                #    score=$commonscore
                #    message="Output file is $frac% identical to the expected output"
                #else
                #    message="Output file contains keywords (${kwlist:1}) but differs significantly from the expected output"
                #fi

            fi
        fi
    fi
fi

cat > $gradefile <<EOF
	{
	    "score": $score,
	    "max_score": $maxscore,
	    "number": "$descr",
	    "output": "$message"
	},
EOF
