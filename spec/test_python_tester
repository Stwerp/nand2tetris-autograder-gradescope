#!/bin/bash
# Copyright 2022 Stewart Thomas CC-BY-NC-SA

# Get assembler test info
stage=$1
testno=$2
test=$3
maxscore=$4
descr="Stage $stage, test $testno: $test"

echo "$descr"

# Locate directories and files
base=$(pwd)
if [ $GRADESCOPE_DEV ]; then
    source="$base"
    python="python"
    #python="/anaconda/bin/python3"
else
    source="$base/source"
    python="/usr/bin/python3"
fi

echo "source $base"

canonical_assembler="$source/nand2tetris/sjt/bunny.sh"

submission="$base/submission"
if [ -f "$submission/PythonFileName.txt" ]; then
    hasm="`cat $submission/PythonFileName.txt`"
    #main="$submission/`cat $submission/PythonFileName.txt`"
    if [ ! -f "$submission/$hasm" ]; then
        echo "Error: $hasm not found. Please place the full file name (example: 'hasm.py') in the PythonFielName.txt file."
        exit 1
    fi
else
    # defaults to bunny.py
    hasm="bunny.py" # default value
    # hasm="$hasm"
    # main="$submission/hasm.py"
fi
main="$submission/$hasm"
student_program="$python $main"

#testfile="$submission/$test" # could be txt or a directory
if [ $stage = A ]
then
    # is single file
    testfile="$submission/$test.txt"
    cmpfile="$submission/$test.cmp"
    outfile="$submission/$test.out"
    stdoutfile="$submission/$test.stdout"
else
    # is a directory
    program=${test##*/}
    testfile="$submission/$test"
    cmpfile="$submission/$test/$program.cmp"
    outfile="$submission/$test/$program.out"
    stdoutfile="$submission/$test/$program.stdout"
fi
gradefile="$base/results/$stage-$testno.results.json"

if [ ! -f $main ]; then
    # Program file not found
    score=0
    message="$hasm not submitted"
    echo "$message"
else
    # Create comparison file
    command="$canonical_assembler $testfile; mv $outfile $cmpfile"
    echo "Running '$command'"
    eval $command

    # Run assembler, redirecting stderr and stdout
    command="$student_program $testfile &> $stdoutfile"
    echo "Running: '$command'"
    eval $command

    if [ ! -f $outfile ]; then
        # Out file not generated
        score=0
        # Replace " with ' and line breaks with \n to make the JSON formatted correctly.
        IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(tr "\042" "\047" < $stdoutfile))'
        len=${#lines[@]}
        message=""
        for (( i=0; i<$len; i++ )); do
            message="$message\n${lines[$i]}"
        done
    else
        # Hack file generated - compare to standard results
        result=`/usr/bin/diff -q $cmpfile $outfile`
        if [[ $result == *differ* ]]; then
            score=0
            message="Output differs from the standard bunny counter"
        else
            score=$maxscore
            message="Output is identical to the standard bunny counter"
        fi
    fi
fi

cat > $gradefile <<EOF
	{
	    "score": $score,
	    "max_score": $maxscore,
	    "number": "$descr",
	    "output": "$message"
	},
EOF
