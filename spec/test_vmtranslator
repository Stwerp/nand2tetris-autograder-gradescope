#!/bin/bash
# Copyright 2019 Janet Davis CC-BY-NC-SA

# Get vmtranslator test info
stage=$1
testno=$2
test=$3
maxscore=$4
bootstrap=$5
descr="Stage $stage, test $testno: $test"

echo "$descr"

# Locate directories and files
base=$(pwd)
if [ $GRADESCOPE_DEV ]; then
    source="$base"
    #python="/anaconda/bin/python3"
    python="python"
else
    source="$base/source"
    python="/usr/bin/python3"
fi

cpu_emulator="$source/nand2tetris/tools/CPUEmulator.sh"

submission="$base/submission"
cd $submission

if [ -f "PythonFileName.txt" ]; then
    hvm="`cat PythonFileName.txt`"
    #main="$submission/`cat $submission/PythonFileName.txt`"
    if [ ! -f "$hvm" ]; then
        echo "Error: $hvm not found. Please place the full file name (example: 'hasm.py') in the PythonFileName.txt file."
        exit 1
    fi
else
    # defaults to hasm.py
    hvm="$submission/hvm.py"
    #main="$submission/hasm.py"
fi
#codewriter="hvmCodeWriter.py"
#main="hvm.py"
main="$hvm"
student_vmtranslator="$python $main"

program=${test##*/}

asmfile="$test/$program.asm"
outfile="$test/$program.out"
stdoutfile="$test/$program.stdout"
tstfile="$test/$program.tst"
cmpfile="$test/$program.cmp"

gradefile="$base/results/$stage-$testno.results.json"

#echo "I am in `pwd` and see `ls`"
#echo "I am going to look for $asmfile"

#if [ ! -f $codewriter ]; then
#    score=0
#    message="hvmCodeWriter.py not submitted"
#    echo "$message"
if [ true ]; then
    # Run student VM translator, redirecting stderr and stdout
    if [ "$bootstrap" == "-y" ]; then
        bootstrap=""
    fi
    command="$student_vmtranslator $test $bootstrap &> $stdoutfile"
    echo "Running '$command' ..."
    eval $command 

    if [ ! -f $asmfile ]; then
        # Assembly program not generated
        echo "Assembly program '$asmfile' not generated"
        score=0
        # Replace " with ' and line breaks with \n to make the JSON formatted correctly.
        IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(tr "\042" "\047" < $stdoutfile))'
        len=${#lines[@]}
        message=""
        for (( i=0; i<$len; i++ )); do
            message="$message\n${lines[$i]}"
        done
    else
        # Run tests, redirecting stderr and stdout
        command="$cpu_emulator $tstfile &> $stdoutfile"
        eval $command 
    
        if [ ! -s $stdoutfile ]; then
             # The test did not run.
    	    score=0
            message="The test did not run. Contact your instructor for assistance."
        else
    	    # If the result file is not empty, parse the results.
    	    IFS=$'\r\n' GLOBIGNORE='*' command eval 'lines=($(cat $stdoutfile))'
    	    result="${lines[0]}"
            echo $result
    	    if [[ "$result" == *success* ]]; then
    	        score=$maxscore
    	        message="The test passed!"
            elif [ -f $outfile ]; then
                score=0
                message="The test did not pass."
            else
                score=0
                message="$result"
    	    fi
        fi
    fi
fi

cat > $gradefile <<EOF
	{
	    "score": $score,
	    "max_score": $maxscore,
	    "number": "$descr",
	    "output": "$message"
	},
EOF
